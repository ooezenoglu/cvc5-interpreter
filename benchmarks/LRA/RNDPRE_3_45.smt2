(set-info :smt-lib-version 2.6)
(set-logic LRA)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>
|)
(set-info :category "random")
(set-info :status unsat)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(assert (exists ((?x1 Real)) (forall ((?x2 Real)) (exists ((?x3 Real)) (let ((?v_13 (* 77 ?x1)) (?v_11 (* 34 ?x3)) (?v_64 (* 51 ?x1)) (?v_36 (* 30 ?x2)) (?v_7 (* 90 ?x1)) (?v_1 (* 27 ?x2)) (?v_70 (* 78 ?x3)) (?v_2 (* 9 ?x3)) (?v_33 (* 29 ?x2)) (?v_39 (* 64 ?x3)) (?v_53 (* 71 ?x1)) (?v_3 (* 7 ?x3)) (?v_4 (* 76 ?x3)) (?v_5 (* 11 ?x2)) (?v_15 (* 42 ?x1)) (?v_23 (* 4 ?x3)) (?v_9 (* 23 ?x2)) (?v_65 (* 21 ?x2)) (?v_17 (* 12 ?x1)) (?v_32 (* 79 ?x1)) (?v_25 (* 48 ?x3)) (?v_22 (* 63 ?x3)) (?v_14 (* 74 ?x1)) (?v_18 (* 32 ?x3)) (?v_19 (* 24 ?x2)) (?v_60 (* 2 ?x3)) (?v_29 (* 84 ?x1)) (?v_51 (* 70 ?x2)) (?v_40 (* 75 ?x1)) (?v_42 (* 1 ?x3)) (?v_54 (* 48 ?x1)) (?v_63 (* 34 ?x2)) (?v_71 (* 66 ?x2)) (?v_69 (* 59 ?x1)) (?v_21 (* (- 12) ?x2)) (?v_61 (* (- 28) ?x1)) (?v_37 (* (- 83) ?x1)) (?v_0 (* (- 2) ?x2)) (?v_41 (* (- 63) ?x2)) (?v_43 (* (- 34) ?x3)) (?v_34 (* (- 70) ?x3)) (?v_10 (* (- 28) ?x2)) (?v_38 (* (- 69) ?x1)) (?v_24 (* (- 35) ?x1)) (?v_52 (* (- 78) ?x2)) (?v_49 (* (- 77) ?x1)) (?v_8 (* (- 55) ?x2)) (?v_12 (* (- 42) ?x1)) (?v_30 (* (- 53) ?x3)) (?v_66 (* (- 24) ?x3)) (?v_20 (* (- 26) ?x1)) (?v_46 (* (- 79) ?x2)) (?v_6 (* (- 32) ?x3)) (?v_58 (* (- 68) ?x1)) (?v_45 (* (- 29) ?x2)) (?v_31 (* (- 38) ?x3)) (?v_28 (* (- 28) ?x3)) (?v_16 (* (- 91) ?x1)) (?v_26 (* (- 44) ?x3)) (?v_27 (* (- 46) ?x1)) (?v_35 (* (- 61) ?x2)) (?v_67 (* (- 10) ?x2)) (?v_44 (* (- 100) ?x3)) (?v_50 (* (- 77) ?x2)) (?v_55 (* (- 42) ?x2)) (?v_48 (* (- 2) ?x3)) (?v_57 (* (- 82) ?x2)) (?v_47 (* (- 66) ?x2)) (?v_68 (* (- 18) ?x1)) (?v_56 (* (- 94) ?x3)) (?v_59 (* (- 60) ?x2)) (?v_62 (* (- 20) ?x3))) (or (and (and (and (and (or (or (< (+ ?v_13 ?v_11) 79) (< (+ ?v_64 ?v_21) (- 53))) (and (not (= (* (- 25) ?x3) 0)) (< (* 90 ?x2) (- 56)))) (or (or (= (+ (* (- 94) ?x1) ?v_36) (- 54)) (>= (+ (+ ?v_7 ?v_1) (* (- 42) ?x3)) 0)) (or (> (+ ?v_61 (* 4 ?x2)) 62) (>= (+ (+ ?v_37 ?v_0) ?v_70) 34)))) (or (or (or (and (not (= (+ (+ (* (- 64) ?x1) ?v_41) (* 3 ?x3)) 12)) (= (+ (* (- 1) ?x1) ?v_43) 0)) (and (< ?v_34 0) (> (+ (* 39 ?x1) (* (- 94) ?x2)) (- 27)))) (and (or (>= (+ (* 20 ?x1) (* 39 ?x3)) 25) (< (+ (+ (* (- 51) ?x1) (* 98 ?x2)) ?v_2) 0)) (and (= (+ (+ (* 58 ?x1) ?v_10) (* 93 ?x3)) (- 91)) (= (+ (+ ?v_38 (* 43 ?x2)) (* 53 ?x3)) (- 61))))) (or (or (> (+ ?v_24 ?v_52) (- 49)) (< (+ ?v_49 (* (- 81) ?x3)) 22)) (and (= (+ ?v_8 (* (- 71) ?x3)) 51) (<= ?v_0 0))))) (or (and (or (and (>= (+ ?v_12 (* (- 45) ?x3)) 0) (and (< (+ (+ (* (- 58) ?x1) ?v_33) ?v_39) 0) (<= (+ (+ ?v_53 (* (- 41) ?x2)) ?v_3) (- 88)))) (or (or (= ?v_30 20) (>= (* (- 43) ?x2) (- 41))) (and (>= (+ (+ (* (- 53) ?x1) ?v_1) ?v_4) 94) (= (+ (* (- 43) ?x1) (* (- 23) ?x2)) 0)))) (and (or (or (<= (+ (* (- 72) ?x2) ?v_2) 5) (>= (+ (* 1 ?x1) ?v_5) 79)) (= (+ ?v_15 ?v_23) 84)) (and (= ?v_9 (- 1)) (and (> (+ (* 93 ?x1) ?v_66) 0) (<= (+ (* (- 65) ?x2) ?v_3) (- 13)))))) (or (and (not (= (+ ?v_65 ?v_4) (- 18))) (< (+ (+ ?v_20 ?v_46) ?v_6) 61)) (and (>= (+ (* 91 ?x1) (* (- 93) ?x2)) 58) (or (> (+ ?v_58 (* 27 ?x3)) 74) (>= (+ (+ (* 88 ?x1) ?v_5) (* (- 67) ?x3)) 0)))))) (or (and (or (and (or (< (+ (* (- 8) ?x1) (* 15 ?x3)) 61) (>= (+ (+ ?v_17 ?v_45) (* 71 ?x3)) 1)) (or (< (+ (+ (* 68 ?x1) (* 64 ?x2)) (* (- 14) ?x3)) (- 47)) (= (+ (* 7 ?x2) ?v_6) (- 42)))) (and (and (or (not (= (+ (+ ?v_32 (* 45 ?x2)) (* (- 82) ?x3)) 48)) (>= (+ (* 1 ?x2) ?v_31) (- 80))) (or (<= (+ (* (- 47) ?x1) (* 14 ?x2)) 38) (>= ?v_25 46))) (and (and (< (* 41 ?x1) 0) (> (+ (+ ?v_7 (* 50 ?x2)) ?v_28) 0)) (> (+ (+ ?v_16 ?v_8) ?v_22) 35)))) (and (or (and (< (+ (* (- 78) ?x1) (* 11 ?x3)) 25) (not (= (* 66 ?x1) 0))) (or (< (+ (+ ?v_14 ?v_9) (* 83 ?x3)) (- 80)) (<= (+ (+ (* 65 ?x1) ?v_10) (* (- 97) ?x3)) 0))) (and (<= (* 49 ?x3) (- 19)) (and (= ?v_11 (- 66)) (> (+ (* 74 ?x2) (* (- 1) ?x3)) (- 73)))))) (and (and (or (or (not (= (+ (+ ?v_12 (* 37 ?x2)) (* 65 ?x3)) (- 63))) (>= (+ ?v_13 (* (- 16) ?x3)) 1)) (or (< (+ ?v_14 (* 95 ?x3)) 0) (<= (+ (+ ?v_15 (* (- 18) ?x2)) ?v_18) 20))) (and (and (and (= (+ (* 52 ?x1) (* 35 ?x2)) 0) (>= (+ (+ ?v_16 ?v_19) (* 5 ?x3)) 13)) (<= (+ (+ (* (- 7) ?x1) (* 94 ?x2)) ?v_26) 0)) (or (>= (+ (* (- 36) ?x1) (* (- 99) ?x2)) (- 98)) (= (+ (* 55 ?x1) (* (- 56) ?x2)) 87)))) (or (or (and (or (not (= (+ (+ ?v_17 (* 63 ?x2)) (* (- 57) ?x3)) 72)) (not (= (+ (+ ?v_27 (* 80 ?x2)) ?v_18) (- 15)))) (or (< (+ (+ (* 69 ?x1) ?v_19) (* 77 ?x3)) 73) (>= (+ (+ (* 28 ?x1) (* 87 ?x2)) (* 82 ?x3)) 52))) (and (and (<= (+ (* (- 89) ?x1) (* (- 35) ?x2)) 47) (= (+ ?v_20 ?v_21) 0)) (<= (+ (* (- 49) ?x2) ?v_22) 66))) (or (or (and (>= (+ (+ (* 67 ?x1) ?v_35) (* (- 30) ?x3)) 10) (< (+ (* (- 15) ?x2) ?v_23) 82)) (and (> (+ ?v_67 ?v_44) 0) (> (+ (* 81 ?x1) (* (- 84) ?x3)) 69))) (and (or (= ?v_24 77) (>= (* 68 ?x3) 4)) (and (not (= (+ (* (- 4) ?x2) ?v_60) 66)) (not (= (+ (+ ?v_14 (* (- 92) ?x2)) ?v_25) 21))))))))) (and (or (or (or (and (or (not (= (+ (+ ?v_29 ?v_50) ?v_26) 0)) (and (> (+ (+ ?v_27 (* 86 ?x2)) (* 58 ?x3)) 33) (> (+ (+ (* 8 ?x1) ?v_55) ?v_28) (- 36)))) (and (and (> (+ (+ (* (- 71) ?x1) (* (- 88) ?x2)) ?v_48) 0) (<= (+ (+ ?v_29 (* 13 ?x2)) (* (- 18) ?x3)) (- 79))) (and (>= ?v_7 7) (<= (* 34 ?x1) (- 100))))) (or (and (>= ?v_57 40) (<= (+ (+ (* (- 41) ?x1) (* (- 5) ?x2)) ?v_30) 57)) (and (or (>= (+ (+ (* (- 87) ?x1) ?v_51) ?v_31) 16) (> (+ ?v_32 (* 44 ?x2)) 18)) (and (> (+ (+ (* (- 37) ?x1) (* (- 3) ?x2)) (* (- 37) ?x3)) 0) (<= (+ ?v_33 (* (- 40) ?x3)) (- 64)))))) (and (or (and (and (not (= (+ (+ (* (- 73) ?x1) (* 26 ?x2)) ?v_34) (- 6))) (>= (+ (+ (* 26 ?x1) ?v_35) (* (- 79) ?x3)) (- 74))) (or (<= (+ (+ (* (- 81) ?x1) (* (- 47) ?x2)) (* 41 ?x3)) (- 19)) (< (+ ?v_40 (* (- 10) ?x3)) 40))) (or (and (< (+ (+ (* 46 ?x1) ?v_47) ?v_42) 94) (> (+ ?v_7 ?v_36) 0)) (< (+ (+ ?v_37 (* (- 74) ?x2)) (* 42 ?x3)) (- 86)))) (or (or (<= (* (- 45) ?x2) 0) (<= (+ ?v_38 (* (- 86) ?x3)) 0)) (or (< ?v_68 (- 32)) (< (+ (* (- 92) ?x1) ?v_39) 16))))) (or (and (and (or (= (+ (+ ?v_40 (* 6 ?x2)) (* 70 ?x3)) 57) (not (= (+ ?v_41 ?v_42) 11))) (or (= (+ (+ ?v_54 (* (- 48) ?x2)) ?v_43) (- 45)) (or (not (= (+ (+ (* 96 ?x1) (* 9 ?x2)) (* 89 ?x3)) (- 90))) (= (+ (+ ?v_12 (* 19 ?x2)) ?v_44) (- 94))))) (or (and (or (>= ?v_45 (- 8)) (< (+ (* (- 21) ?x1) (* (- 90) ?x2)) 67)) (and (> (* (- 84) ?x1) 36) (= (+ (+ (* 15 ?x1) ?v_46) (* (- 68) ?x3)) 11))) (and (or (>= (* 60 ?x2) 34) (< (+ ?v_47 ?v_48) 0)) (or (not (= (+ ?v_49 (* (- 12) ?x3)) 75)) (>= (+ (+ (* (- 76) ?x1) ?v_50) (* 38 ?x3)) (- 65)))))) (and (and (or (<= (+ ?v_51 (* (- 93) ?x3)) 0) (= (+ (* (- 85) ?x2) (* (- 51) ?x3)) 0)) (or (> ?v_52 (- 7)) (<= (+ (* 3 ?x1) (* (- 48) ?x3)) 0))) (and (and (and (= ?v_56 0) (= (+ ?v_53 ?v_44) 0)) (and (<= (+ (+ ?v_54 (* (- 91) ?x2)) (* (- 49) ?x3)) 44) (>= (+ (+ (* 22 ?x1) (* 97 ?x2)) (* (- 91) ?x3)) (- 41)))) (and (and (< (+ (+ (* (- 93) ?x1) ?v_59) (* 10 ?x3)) (- 17)) (> (+ (+ (* 97 ?x1) ?v_55) ?v_56) (- 24))) (= (+ (+ (* 89 ?x1) (* 65 ?x2)) (* 84 ?x3)) 27)))))) (and (and (or (and (>= (* 99 ?x1) (- 32)) (> (+ (* 47 ?x1) (* (- 90) ?x3)) (- 33))) (or (= (+ (* (- 19) ?x1) ?v_34) 5) (> (+ (* (- 97) ?x1) ?v_57) 0))) (and (and (> (+ (* (- 54) ?x2) (* (- 87) ?x3)) 51) (or (> (+ (+ (* (- 11) ?x1) (* 77 ?x2)) (* 59 ?x3)) 77) (>= (+ ?v_58 (* (- 73) ?x2)) 46))) (or (or (< (+ (+ (* 53 ?x1) ?v_59) ?v_60) (- 86)) (>= (+ ?v_41 (* (- 52) ?x3)) 1)) (and (< (+ (+ (* (- 12) ?x1) (* 38 ?x2)) ?v_62) 79) (>= ?v_63 0))))) (and (or (or (or (or (>= (+ (+ ?v_61 (* 95 ?x2)) ?v_62) 37) (<= (+ ?v_63 (* (- 23) ?x3)) 11)) (and (= (+ (+ ?v_64 ?v_65) (* (- 88) ?x3)) (- 46)) (not (= (+ (+ (* 57 ?x1) ?v_71) (* (- 98) ?x3)) (- 54))))) (or (or (< (+ (+ (* (- 55) ?x1) (* (- 71) ?x2)) ?v_66) 0) (> (+ (* (- 33) ?x1) (* (- 55) ?x3)) 39)) (or (< (+ ?v_24 (* 47 ?x3)) 0) (> (+ (+ (* 44 ?x1) (* (- 20) ?x2)) (* 98 ?x3)) (- 96))))) (or (and (and (= (+ ?v_64 (* (- 83) ?x2)) 50) (> (+ ?v_67 (* 80 ?x3)) 0)) (and (> (+ ?v_69 ?v_30) 0) (<= (+ (+ ?v_68 (* (- 14) ?x2)) (* 61 ?x3)) (- 73)))) (< (* (- 2) ?x1) 0))) (and (or (or (= (+ (+ ?v_69 (* 12 ?x2)) (* (- 15) ?x3)) (- 24)) (or (> (+ (+ (* (- 16) ?x1) (* 68 ?x2)) (* 22 ?x3)) (- 96)) (>= (+ (* (- 49) ?x1) ?v_70) 55))) (and (< (+ (+ (* 31 ?x1) ?v_71) (* (- 59) ?x3)) (- 95)) (< (+ (* 83 ?x1) (* 90 ?x3)) (- 74)))) (and (or (>= (+ (+ (* 11 ?x1) (* 76 ?x2)) ?v_48) 0) (not (= (+ (+ (* (- 32) ?x1) (* 91 ?x2)) (* 91 ?x3)) 0))) (and (not (= (+ (* 29 ?x1) (* (- 11) ?x3)) 0)) (> (+ (* (- 82) ?x1) (* 50 ?x3)) (- 70))))))))))))))
(check-sat)
(exit)
